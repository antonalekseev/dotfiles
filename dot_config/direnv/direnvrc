NODE_VERSIONS="$HOME/.nvm/versions/node"
NODE_VERSION_PREFIX="v"

layout_virtualenv() {
  local venv_path="$1"
  source ${venv_path}/bin/activate
}
  
layout_virtualenvwrapper() {
  local venv_path="${WORKON_HOME}/$1"
  layout_virtualenv $venv_path
}

log_file() {
  if [[ -n $DIRENV_LOG_FORMAT ]]; then
    local msg=$*
    local logfile="$TMPDIR/direnv.log"
    # shellcheck disable=SC2059,SC1117
    printf "${DIRENV_LOG_FORMAT}\n" "$msg" >>"$logfile"
  fi
}

# Usage: use ruby <version>
#
# Loads the specified ruby version into the environent
#
# from: https://direnv.net/#/docs/ruby
use_ruby() {
  local ruby_dir=$HOME/.rubies/$1
  load_prefix $ruby_dir
  layout ruby
}

# Usage: use nvm <version>
#
# Activates the specified node version via nvm
#
# from: https://github.com/direnv/direnv/wiki/Node#using-nvm
use_nvm() {
  local node_version=$1

  nvm_sh=~/.nvm/nvm.sh
  if [[ -e $nvm_sh ]]; then
    source $nvm_sh
    nvm use $node_version
  fi
}


# Usage: layout pipenv
#
# Customized version of built-in layout_pipenv that runs `pipenv sync` instead
# of `pipenv install` in the case of `Pipfile.lock` is being found.

layout_pipenv() {
  PIPENV_PIPFILE="${PIPENV_PIPFILE:-Pipfile}"
  PIPENV_LOCK="${PIPENV_PIPFILE}.lock"
  if [[ ! -f "$PIPENV_PIPFILE" ]]; then
    log_error "No Pipfile found.  Use \`pipenv\` to create a \`$PIPENV_PIPFILE\` first."
    exit 2
  fi

  VIRTUAL_ENV=$(pipenv --venv 2>/dev/null ; true)

  if [[ -z $VIRTUAL_ENV || ! -d $VIRTUAL_ENV ]]; then
    if [[ ! -f "$PIPENV_LOCK" ]]; then
      pipenv install --dev
    else
      pipenv sync --dev
    fi
    VIRTUAL_ENV=$(pipenv --venv)
  fi

  PATH_add "$VIRTUAL_ENV/bin"
  export PIPENV_ACTIVE=1
  export VIRTUAL_ENV
}

# Usage: layout python <python_exe>
#
# Creates and loads a virtual environment under
# "$direnv_layout_dir/python-$python_version".
# This forces the installation of any egg into the project's sub-folder.
# For python older then 3.3 this requires virtualenv to be installed.
#
# It's possible to specify the python executable if you want to use different
# versions of python.
#
layout_python() {
  local old_env
  local python=${1:-python}
  [[ $# -gt 0 ]] && shift
  old_env=$(direnv_layout_dir)/virtualenv
  unset PYTHONHOME
  if [[ -d $old_env && $python == python ]]; then
    VIRTUAL_ENV=$old_env
  else
    local python_version ve
    # shellcheck disable=SC2046
    read -r python_version ve <<<$($python -c "import pkgutil as u, platform as p;ve='venv' if u.find_loader('venv') else ('virtualenv' if u.find_loader('virtualenv') else '');print(p.python_version()+' '+ve)")
    if [[ -z $python_version ]]; then
      log_error "Could not find python's version"
      return 1
    fi

    VIRTUAL_ENV=$(direnv_layout_dir)/python-$python_version
    case $ve in
      "venv")
        if [[ ! -d $VIRTUAL_ENV ]]; then
          $python -m venv "$@" "$VIRTUAL_ENV"
        fi
        ;;
      "virtualenv")
        if [[ ! -d $VIRTUAL_ENV ]]; then
          $python -m virtualenv "$@" "$VIRTUAL_ENV"
        fi
        ;;
      *)
        log_error "Error: neither venv nor virtualenv are available."
        return 1
        ;;
    esac
  fi
  export VIRTUAL_ENV
  PATH_add "$VIRTUAL_ENV/bin"
}

# Usage: layout python2
#
# A shortcut for $(layout python python2)
#
layout_python2() {
  layout_python python2 "$@"
}

# Usage: layout python3
#
# A shortcut for $(layout python python3)
#
layout_python3() {
  layout_python python3 "$@"
}

# Usage: layout pyenv <python version number> [<python version number> ...]
#
# Example:
#
#    layout pyenv 3.6.7
#
# Uses pyenv and layout_python to create and load a virtual environment under
# "$direnv_layout_dir/python-$python_version".
#
layout_pyenv() {
  unset PYENV_VERSION
  # layout_python prepends each python version to the PATH, so we add each
  # version in reverse order so that the first listed version ends up
  # first in the path
  local i
  for ((i = $#; i > 0; i--)); do
    local python_version=${!i}
    local pyenv_python
    pyenv_python=$(pyenv root)/versions/${python_version}/bin/python
    if [[ -x "$pyenv_python" ]]; then
      if layout_python "$pyenv_python"; then
        # e.g. Given "use pyenv 3.6.9 2.7.16", PYENV_VERSION becomes "3.6.9:2.7.16"
        PYENV_VERSION=${python_version}${PYENV_VERSION:+:$PYENV_VERSION}
      fi
    else
      log_error "pyenv: version '$python_version' not installed"
      return 1
    fi
  done

  [[ -n "$PYENV_VERSION" ]] && export PYENV_VERSION
}

layout_pdm() {
    PYPROJECT_TOML="${PYPROJECT_TOML:-pyproject.toml}"
    if [ ! -f "$PYPROJECT_TOML" ]; then
        log_status "No pyproject.toml found. Executing \`pmd init\` to create a \`$PYPROJECT_TOML\` first."
        # XXX: The following should be replaced with a Python version from
        # pyproject.toml either for PDM_PYTHON_VERSION direnv variable
        pdm init --non-interactive --python "$(python3 --version 2>/dev/null | cut -d' ' -f2 | cut -d. -f1-2)"
    fi

    if ! pdm venv list|grep -Eq '^[*-][^:]+:'; then
        log_status "No virtual environment exists. Executing \`pdm venv create\` to create one."
        pdm venv create -n pdm
        NEW_VENV=1
    fi

    PDM_VENV=$(pdm venv list|grep -E '^[*-]\ +pdm:')
    VIRTUAL_ENV="${PDM_VENV##*\ pdm: }"
    PATH_add "$VIRTUAL_ENV/bin"
    export PDM_ACTIVE=1
    export VIRTUAL_ENV
    if [ -n "$NEW_VENV" ]; then
        python -m ensurepip --upgrade
        if [ -f "pdm.lock" ]; then
            pdm sync
        else
            pdm install
        fi
    fi
}
