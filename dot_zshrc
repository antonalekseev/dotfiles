# -*- mode: shell-script; -*-

bindkey -v

export PAGER="less"
export LESS="-FXR"
export DFT_SYNTAX_HIGHLIGHT="off"

# Persist vi mode between commands
# https://unix.stackexchange.com/a/110877
accept-line() { prev_mode=$KEYMAP; zle .accept-line }
accept-search() { prev_mode=$KEYMAP; zle .accept-search }
zle-line-init() { zle -K ${prev_mode:-vicmd} }

zle -N accept-line
zle -N accept-search
zle -N zle-line-init

# Set cursor shape for vi modes
# http://lynnard.me/blog/2014/01/05/change-cursor-shape-for-zsh-vi-mode/
zle-keymap-select () {
    if [ "$TERM" != "dumb" ]; then
        if [ $KEYMAP = vicmd ]; then
            # the command mode for vi
            echo -ne "\e[2 q"
        else
            # the insert mode for vi
            echo -ne "\e[4 q"
        fi
    fi
}

zle -N zle-keymap-select

# bracket text object
autoload -U select-bracketed
zle -N select-bracketed
for m in visual viopp; do
    for c in {a,i}${(s..)^:-'()[]{}<>bB'}; do
        bindkey -M $m $c select-bracketed
    done
done

# quote text object
autoload -U select-quoted
zle -N select-quoted
for m in visual viopp; do
    for c in {a,i}{\',\",\`}; do
        bindkey -M $m $c select-quoted
    done
done

# surround text object
# https://github.com/zsh-users/zsh/blob/master/Functions/Zle/surround
autoload -Uz surround
zle -N delete-surround surround
zle -N add-surround surround
zle -N change-surround surround
bindkey -a cs change-surround
bindkey -a ds delete-surround
bindkey -a s add-surround
bindkey -M visual s add-surround

# edit command line in EDITOR
autoload -U edit-command-line
zle -N edit-command-line
bindkey -M vicmd v edit-command-line

autoload -U zmv

export HOMEBREW_NO_AUTO_UPDATE=1

[ -z "$SSH_TTY" ] || export SSH_AUTH_SOCK=$HOME/.ssh/ssh_auth_sock
[ "$(uname)" = "Linux" ] && export SSH_AUTH_SOCK=$XDG_RUNTIME_DIR/ssh-agent.socket

HISTFILE=$HOME/.zshistory
HISTSIZE=500000
SAVEHIST=500000
HISTORY_IGNORE="(j *|jb|jf|jj|ju|just *|chezmoi *|fc -l|cd|ls|ll|pwd|exit|date|man *|tldr *|* -h|* --help|top|btop)"

alias mpg123="mpg123 -vC"
alias tmux="tmux -u"
alias s="sudo -E"
alias tsz="date -u '+%Y-%m-%dT%H:%M:%SZ'"
alias di="date -u '+%Y%m%d'"
alias did="date -u '+%Y-%m-%d'"
[ "$(uname)" = "Darwin" ] && alias sudoedit="sudo -e"
if [ "$(uname)" != "Linux" ]; then
    alias mls="stat -f '%A %N'"
else
    alias mls="stat -c '%a %n'"
fi

# Python
export VIRTUAL_ENV_DISABLE_PROMPT='1'
export USE_EMOJI="false"
export PYTHONSTARTUP="$HOME/.pythonstartup"
[ "$(uname)" = "Darwin" ] && export PIPX_DEFAULT_PYTHON="python3.13"

# zoxide
eval "$(zoxide init zsh --cmd j)"
alias jj="ji"
alias jb="j -"
alias ju="j .."

setopt SHARE_HISTORY
setopt HIST_REDUCE_BLANKS
setopt HIST_SAVE_NO_DUPS
setopt HIST_IGNORE_DUPS
setopt NO_HIST_SAVE_BY_COPY
setopt INC_APPEND_HISTORY
setopt EXTENDED_HISTORY
setopt HIST_IGNORE_SPACE
setopt PROMPT_SUBST

WHOAMI=`whoami`

if [[ "$ITERM_PROFILE" == "Hotkey Window" ]]; then
    TMUX_SESSION_NAME="${WHOAMI}-hotkey"
elif [[ "$ITERM_PROFILE" == "Fullscreen" ]]; then
    TMUX_SESSION_NAME="${WHOAMI}-full"
else
    TMUX_SESSION_NAME="${WHOAMI}-default"
fi

if [ "$TERM" != "screen-256color" ]; then
    tmux list-sessions -F "#{session_name}:#{session_attached}"\
        |grep -q "${TMUX_SESSION_NAME}"\
        || tmux new-session -s "$TMUX_SESSION_NAME"
    tmux list-sessions -F "#{session_name}:#{session_attached}"\
        |grep -q "${TMUX_SESSION_NAME}:1"\
        || tmux attach-session -t "$TMUX_SESSION_NAME"
fi

eval "$(direnv hook zsh)"

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" --no-use  # This loads nvm

omz_kubectl_post_load() {
    # extra kubectl aliases missing for the stock OMZ::plugins/kubectl
    unalias kl1h
    unalias kl1m
    unalias kl1s
    unalias klf
    unalias klf1h
    unalias klf1m
    unalias klf1s

    #  Seconds
    alias kl1s='k logs --since 1s'
    alias kl5s='k logs --since 5s'
    alias kl10s='k logs --since 10s'
    alias kl30s='k logs --since 10s'
    #  Seconds + follow
    alias kl1sf='k logs --since 1s -f'
    alias kl5sf='k logs --since 5s -f'
    alias kl10sf='k logs --since 10s -f'
    alias kl30sf='k logs --since 10s -f'
    #  Minutes
    alias kl1m='k logs --since 1m'
    alias kl5m='k logs --since 5m'
    alias kl10m='k logs --since 10m'
    alias kl30m='k logs --since 10m'
    #  Minutes + follow
    alias kl1mf='k logs --since 1m -f'
    alias kl5mf='k logs --since 5m -f'
    alias kl10mf='k logs --since 10m -f'
    alias kl30mf='k logs --since 10m -f'
    #  Hours
    alias kl1h='k logs --since 1h'
    alias kl5h='k logs --since 5h'
    alias kl10h='k logs --since 10h'
    #  Hours + follow
    alias kl1hf='k logs --since 1h -f'
    alias kl5hf='k logs --since 5h -f'
    alias kl10hf='k logs --since 10h -f'

    # PersistentVolumes
    alias kgpv='k get pv'
    alias kgpva='kgpv --all-namespaces'
    alias kgpvw='kgpv --watch'
    alias kgpvwa='kgpv --watch --all-namespaces'
    alias kgpvwide='kgpv -o wide'
    alias kdespv='k describe pv'
    alias kdelpv='k delete pv'
}

# zplug on macOS
if [ "$(uname)" = "Darwin" ]; then
    export ZPLUG_HOME=$HOMEBREW_PREFIX/opt/zplug
    source $ZPLUG_HOME/init.zsh
    zplug romkatv/powerlevel10k, as:theme, depth:1
    zplug "hlissner/zsh-autopair", defer:2
    zplug "zsh-users/zsh-history-substring-search"
    zplug "plugins/sudo", from:oh-my-zsh
    zplug "plugins/kubectl", from:oh-my-zsh, hook-load:"omz_kubectl_post_load"
    zplug "plugins/terraform", from:oh-my-zsh
    zplug "johanhaleby/kubetail"
    zplug "kovetskiy/zsh-add-params"
    zplug load
fi

# zinit on Linux
if [ "$(uname)" = "Linux" ] || [ "$(uname)" = "FreeBSD" ]; then
    source "$HOME/.zinit/bin/zinit.zsh"
    zinit ice depth=1; zinit light romkatv/powerlevel10k
    zinit ice wait lucid; zinit load hlissner/zsh-autopair
    zinit ice wait"1"; zinit load zsh-users/zsh-history-substring-search
    zinit ice wait"0"; zinit snippet OMZ::plugins/sudo
    zinit ice wait"0"; zinit snippet OMZ::plugins/kubectl atload"omz_kubectl_post_load"
    zinit ice wait"0"; zinit snippet OMZ::plugins/terraform
    zinit ice wait lucid; zinit load kovetskiy/zsh-add-params
    zinit ice wait lucid; zinit load johanhaleby/kubetail
fi

# zsh-history-substring-search
bindkey -M vicmd 'k' history-substring-search-up
bindkey -M vicmd 'j' history-substring-search-down
bindkey '^K' history-substring-search-up
bindkey '^J' history-substring-search-down

# sudo

# reclaim ^S, thanks https://superuser.com/a/385290
stty start undef
stty stop undef
bindkey -r '^[^['
bindkey -M vicmd '^S' sudo-command-line
bindkey -M viins '^S' sudo-command-line

# zsh-add-params
bindkey -v '^P' add-params
bindkey -a '^P' add-params

# create Terraform plugin cache dir if doesn't exist
# https://www.terraform.io/cli/config/config-file#provider-plugin-cache
[ -d "$HOME/.terraform.d/plugin-cache" ] || mkdir -p "$HOME/.terraform.d/plugin-cache"

function _tmuxw() {
    [ -z "$TMUX" ] && $* && return
    cmd=$1
    shift
    cur=$(tmux lsw | grep -m1 "[:] ${cmd##*/} $*"|cut -f1 -d:)
    if [ -n "$cur" ];then
        tmux selectw -t :$cur
    else
        tmux neww -n "${cmd##*/} $*" "$cmd $*"
    fi
}

function ssh() {
    _tmuxw =ssh $*
}

function telnet() {
    _tmuxw =telnet $*
}

function cu() {
    _tmuxw =cu $*
}

# @re
# run command elsewhere (on all .hosts except this one)
function re() {
    if [ "$#" -lt "1" ]; then
        echo 'ERROR: no command specified'
        return
    fi
    h=$(grep -v "$HOSTNAME" "$HOME/.hosts"|tr '\n' ',')
    pdsh -w "${h%?}" "$*"
}

# helpers for go/python q module
qq() {
    clear

    logpath="$TMPDIR/q"
    if [ -z "$TMPDIR" ]; then
        logpath="/tmp/q"
    fi

    if [ ! -f "$logpath" ]; then
        echo 'Q LOG' > "$logpath"
    fi

    tail -100f -- "$logpath"
}

rmqq() {
    logpath="$TMPDIR/q"
    if [ -z "$TMPDIR" ]; then
        logpath="/tmp/q"
    fi
    if [ -f "$logpath" ]; then
        rm "$logpath"
    fi
    qq
}

# abbrpwd returns abbreviated $PWD if it's within $HOME and full otherwise
function abbrpwd() {
    if [ "${PWD##$HOME}" != "$PWD" ]; then
        echo "~${PWD##$HOME}"
    else
        echo $PWD
    fi
}

# jf opens directory in Finder.app: $PWD if called without args, $1 otherwise
function jf() {
    if [ -z "$1"]; then
        open "$PWD"
    else
        open "$1"
    fi
}

# htmlenc converts UTF-8 text to HTML characters
function htmlenc() {
    recode u8..h
}

# htmldec converts HTML characters to UTF-8 text
function htmldec() {
    recode h..u8
}

# rename specified <filenames> to <filename>.YYYYMMDDTHHMMSS.bak
function bmv() {
    zmv "($1)" '$1.$(date +%Y%m%dT%H%M%S).bak'
}

# copy specified <filenames> to <filename>.YYYYMMDDTHHMMSS.bak
function bcp() {
    zmv -C "($1)" '$1.$(date +%Y%m%dT%H%M%S).bak'
}

# pipe the last command through the pager
function pagerlast() {
    eval "${history[@]:0:1}|$PAGER"
    accept-line
}
zle -N pagerlast{,}
bindkey -v '^R' pagerlast

# copy vimium-options.json to .config dir and chezmoi add it
function save-vimium-config() {
    vimiumdir="$HOME/.config/vimium"
    vimiumcfg="$HOME/Downloads/vimium-options.json"
    [ -d "$vimiumdir" ] || mkdir "$vimiumdir"
    if [ -f "$vimiumcfg" ]; then
        mv "$vimiumcfg" "$vimiumdir"
        chezmoi add "${vimiumdir}/${vimiumcfg##*/}"
    else
        echo "There is no such file $vimiumcfg"
        return 1
    fi
}

# shows current versions of installed zplug plugins
function zplug-versions() {
    find $ZPLUG_HOME/repos -type d -name ".git"|while read -r plug; do
        dir="${plug%%/.git}"
        name="${dir#$ZPLUG_HOME/repos/}"
        pushd -q $dir
        version=$(git rev-parse --short head)
        popd -q
        printf "$name\t$version\n"
    done
}

# reduces the output to <= `n` lines of original output adding a delimiter `dn`
# between head and tail similar to `pee 'head -n4' 'tail -1'` for `n=5`, but
# handles the cases where inputs length is `<= n` properly
function headtail() {
    n=$1
    dn=$((n-1))
    d=${2:-'[...]'}

    sed -ne '
    1,'"$dn"' H
    '"$dn"' {
        x
        s/^\n//
        p
        x
    }
    '"$n"' {
        $ {
        p
        b
        }
        a\
'"$d"'
        s/.*//
        h
    }
    '"$n"',$ {
        H
        h
    }
    $ {
        '"$dn"' ! {
        x
        s/^\n//
        p
        }
        '"$dn"' {
        '"$n"' ! q
        }
        '"$n"' {
        x
        s/.*\n//
        p
        }
    }
    '
}

# runs a request to gitignore.io API
# https://docs.gitignore.io/install/command-line
# the repository with the templates https://github.com/toptal/gitignore was archived on 20250124
function gi() {
    curl -sLw \"\\\n\" https://www.toptal.com/developers/gitignore/api/$@
}

# displays tidied up version of an output of `dig +trace -t <rtype> <query>`
function nstr() {
    only='"NS","SOA","A","AAAA","CNAME","MX","TXT", "SRV","PTR"'
    printf -v q '.[].answer[] | select([.type] | inside([%s])) |  [.name, .class, .type, .data, .ttl] | @tsv' "$only"
    dig +all +trace -t "$1" "$2" | \
        jc --dig -m| \
        jq -r "$q"
}

# nstld <domain>
# executes a nonrecursive query of the specified type against all authoritative nameservers
# for the TLD of the domain
function nstld() {
    for ns in $(dig -t ns "${1##*.}."|jc --dig -m|jq -r '.[].answer[] | select(.type == "NS") |  .data | @text'); do
        dig +norecurse +authority -t ns "$1" "@$ns"
    done
}

# 4cw
# returns a random 4-character word from the dictionary
function 4cw() {
    grep -Eo '^[a-z]{4}$' /usr/share/dict/words|sort -r|shuf|head -1
}

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# GCP
export USE_GKE_GCLOUD_AUTH_PLUGIN=True
source "/opt/homebrew/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc"
