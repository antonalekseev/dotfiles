#!/bin/sh

# source: https://stackoverflow.com/a/17871737
RE_IPV4="((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])"

RE_IPV6="([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|"                    # TEST: 1:2:3:4:5:6:7:8
RE_IPV6="${RE_IPV6}([0-9a-fA-F]{1,4}:){1,7}:|"                         # TEST: 1::                              1:2:3:4:5:6:7::
RE_IPV6="${RE_IPV6}([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|"         # TEST: 1::8             1:2:3:4:5:6::8  1:2:3:4:5:6::8
RE_IPV6="${RE_IPV6}([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|"  # TEST: 1::7:8           1:2:3:4:5::7:8  1:2:3:4:5::8
RE_IPV6="${RE_IPV6}([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|"  # TEST: 1::6:7:8         1:2:3:4::6:7:8  1:2:3:4::8
RE_IPV6="${RE_IPV6}([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|"  # TEST: 1::5:6:7:8       1:2:3::5:6:7:8  1:2:3::8
RE_IPV6="${RE_IPV6}([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|"  # TEST: 1::4:5:6:7:8     1:2::4:5:6:7:8  1:2::8
RE_IPV6="${RE_IPV6}[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|"       # TEST: 1::3:4:5:6:7:8   1::3:4:5:6:7:8  1::8
RE_IPV6="${RE_IPV6}:((:[0-9a-fA-F]{1,4}){1,7}|:)|"                     # TEST: ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8 ::8       ::
RE_IPV6="${RE_IPV6}fe08:(:[0-9a-fA-F]{1,4}){2,2}%[0-9a-zA-Z]{1,}|"     # TEST: fe08::7:8%eth0      fe08::7:8%1                                      (link-local IPv6 addresses with zone index)
RE_IPV6="${RE_IPV6}::(ffff(:0{1,4}){0,1}:){0,1}${RE_IPV4}|"            # TEST: ::255.255.255.255   ::ffff:255.255.255.255  ::ffff:0:255.255.255.255 (IPv4-mapped IPv6 addresses and IPv4-translated addresses)
RE_IPV6="${RE_IPV6}([0-9a-fA-F]{1,4}:){1,4}:${RE_IPV4}"                # TEST: 2001:db8:3:4::192.0.2.33  64:ff9b::192.0.2.33                        (IPv4-Embedded IPv6 Address)

chkdep() {
	missing=""
	for bin in "$@"; do
		command -v "$bin" 1>&2 >/dev/null || missing="${missing}$bin, "
	done
	[ -z "$missing" ] || \
		die "this program needs '${missing%%, }' to run, exiting." 2
}

die() {
	msg=$1
	status=${2:-1}
	printf "error: %s\n" "$msg"
	exit "$status"
}

hr() {
	printf "%80s\n" |tr " " "="

}

usage() {
	cat <<EOF
Usage:	$(basename "$0") <curl arguments ...>

cURL wrapper to run requests against all hosts if A query returns multiple
records. It simply appends relevant --resolve statements and doesn't handle
other corner cases like --output, etc.

EOF
	exit 1
}

chkdep "curl"

[ $# -lt 1 ] && usage

for url in "$@"; do :; done
hostname=$(echo "$url"|grep -Eo "[/@][^:/]+"|head -1)
scheme=${url%%://*}
portproto=$(grep -E "^${scheme}[ 	]+[0-9]+/tcp" /etc/services|tr '\t' ' '|tr -s ' '|cut -d" " -f2)
{ host -ta "${hostname#/}" & host -taaaa "${hostname#/}"; }|grep -Eo "($RE_IPV4|$RE_IPV6)" |while read -r addr; do
	hr
	curl --resolve "${hostname#/}:${portproto%/*}:${addr}" $@
done
